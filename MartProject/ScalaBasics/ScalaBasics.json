{"paragraphs":[{"text":"class ScalaLanguageBasics {\r\n\r\n  def HelloWorld():Unit={\r\n    println(\"Hello World! How are you today?\")\r\n  }\r\n\r\n  def ImmutableVariables():Unit={\r\n    //val <VariableName>: <Scala Data Type> = <Literal Value>\r\n    val apples: Int = 5\r\n    //apples = 10 //Error\r\n  }\r\n\r\n  def MutableVariables():Unit={\r\n    var favoriteFruit: String = \"Mango\"\r\n    favoriteFruit = \"Apple\" //No Error\r\n  }\r\n\r\n  def LazyInitialization():String={\r\n    lazy val juiceOf = \"Orange\"\r\n    juiceOf //This returns the value of juiceOf this is when this statement is evaluated\r\n  }\r\n\r\n  def SupportedDataTypes():Unit={\r\n    val apples: Int = 5\r\n    val fruitsInMarket: Long = 100000000L\r\n    val fruitsInBasket: Short = 1\r\n    val priceOfMango: Double = 2.50\r\n    val priceOfOrange: Float = 2.50f\r\n    val nameOfFruit: String = \"Mango\"\r\n    val mangoByte: Byte = 0xa\r\n    val mangoStartsWith: Char = 'M'\r\n    val nothing: Unit = ()\r\n  }\r\n\r\n  def InitializeWithoutValue():Unit={\r\n    //var leastFavoriteFruit: String = _   //   _ is wildcard or place holder operator. IDE complains\r\n    //leastFavoriteFruit = \"Raw mango\"\r\n  }\r\n\r\n  def StringInterpolation():Unit={\r\n    val favoriteFruit: String = \"Mango\"\r\n    println(s\"My favorite fruit = $favoriteFruit\")//Prints the string on console\r\n\r\n    //String interpolation of object properties\r\n    case class Fruit(name: String, taste: String)\r\n    val anotherFavoriteFruit: Fruit = Fruit(\"Orange\", \"Sweet\")\r\n    println(s\"My another favorite fruit name = ${anotherFavoriteFruit.name}, taste = ${anotherFavoriteFruit.taste}\")\r\n\r\n    //String interpolation for expressions\r\n    val qtyFruits: Int = 10\r\n    println(s\"Are we buying 10 mangoes = ${qtyFruits == 10}\")\r\n\r\n  }\r\n\r\n  def StringInterpolationFormatted():Unit = {\r\n    val dryFruitName = \"Almond\"\r\n    //Formatting interpolation\r\n    val dryFruitPrice: Double = 500.50\r\n    println(s\"DryFruit price = $dryFruitPrice\")\r\n    println(f\"Formatted DryFruit price = $dryFruitPrice%.2f\")\r\n\r\n    //Raw interpolation\r\n    println(raw\"Favorite DryFruit\\t$dryFruitName\")\r\n  }\r\n\r\n  def MultiLineString():Unit={\r\n    val fruitLabel: String =\r\n      \"\"\"\r\n        |{\r\n        |\"fruit\":\"Mango\",\r\n        |\"state\":\"Ripe\",\r\n        |\"price\":8.50\r\n        |}\r\n      \"\"\".stripMargin\r\n    println(s\"FruitLabel = $fruitLabel\")\r\n    //Different separator #\r\n    val fruitLabel2: String =\r\n      \"\"\"\r\n      #{\r\n      #\"fruit\":\"Mango\",\r\n      #\"state\":\"Raw\",\r\n      #\"price\":3.00\r\n      #}\r\n      \"\"\".stripMargin('#')\r\n\r\n    println(s\"FruitLabel = $fruitLabel2\")\r\n\r\n  }\r\n\r\n  def TypeInference():Unit={\r\n    //val <VariableName> : <Scala data type> = <Literal value>\r\n    val apples = 5\r\n    val fruitsInMarket = 100000000L\r\n    val fruitsInBasket = 1\r\n    val priceOfMango = 2.50\r\n    val priceOfOrange = 2.50f\r\n    val nameOfFruit = \"Mango\"\r\n    val mangoByte = 0xa\r\n    val mangoStartsWith = 'M'\r\n    val nothing = ()\r\n\r\n  }\r\n\r\n  def TypeConversion():Unit ={\r\n    val mangoesInBasket: Short = 1\r\n    val mangoesToEat: Int = mangoesInBasket\r\n\r\n    //val giveMangoes: String = mangoesInBasket //This fails\r\n\r\n    val giveMeMangoes: String = mangoesInBasket.toString() //works\r\n\r\n  }\r\n\r\n  def IfElseElseIfExample(): Unit ={\r\n    val mangoes = 20\r\n    val mangoesPerBasket = 10\r\n    val minimumMangoes = 8\r\n    if(mangoes > 10)\r\n      println(s\"Number of mango baskets = ${mangoes / mangoesPerBasket}\")\r\n    else if (mangoes == 10)\r\n      println(s\"Number of mango baskets = 1\")\r\n    else\r\n      println(s\"Number of mangoes = $minimumMangoes\")\r\n\r\n    //Usagae like ternary operator <condition>? if true: if false\r\n    val baskets = if(mangoes > 10) (mangoes / mangoesPerBasket) else 1\r\n    println(s\"Number of mango baskets = $baskets\")\r\n  }\r\n\r\n  def ForLoop(): Unit = {\r\n    //A simple for loop from 1 to 5 inclusive\r\n    for(mangoes <- 1 to 5){\r\n      println(s\"Number of mangoes = $mangoes\")\r\n    }\r\n\r\n    //A simple for loop from 1 to 5, where 5 is NOT inclusive\r\n    for(mangoes <- 1 until 5){\r\n      println(s\"Number of mangoes = $mangoes\")\r\n    }\r\n    //Filter values using if conditions in for loop\r\n    val mangoVarieties = List(\"Alphonso\", \"Dasheri\", \"Badami\", \"Himsagar\", \"Fazli\")\r\n    for(variety <- mangoVarieties if variety == \"Alphonso\" || variety == \"Dasheri\"){\r\n      println(s\"Found best mangoes = $mangoVarieties\")\r\n    }\r\n  }\r\n\r\n  def ForLoopContinued():Unit={\r\n    val mangoVarieties = List(\"Alphonso\", \"Dasheri\", \"Badami\", \"Himsagar\", \"Fazli\")\r\n    val sweetMangoes = for { variety <- mangoVarieties if (variety == \"Alphonso\" || variety == \"Dasheri\") }\r\n        yield variety\r\n    //Note: This time it is curly braces in for loop declaration as we are using yield\r\n    println(s\"Sweetening ingredients = $sweetMangoes\")\r\n\r\n  }\r\n\r\n  def ForLoop2DimArray():Unit={\r\n    val twoDimArr = Array.ofDim[String](2,2)\r\n    twoDimArr(0)(0) = \"Alphonso\"\r\n    twoDimArr(0)(1) = \"Dasheri\"\r\n    twoDimArr(1)(0) = \"Badami\"\r\n    twoDimArr(1)(1) = \"Fazli\"\r\n\r\n    for { x <- 0 until 2; y <- 0 until 2 }\r\n      println(s\"Mango at index ${(x,y)} = ${twoDimArr(x)(y)}\")\r\n\r\n  }\r\n\r\n  def RangeExamples():Unit ={\r\n    //Create a simple numeric range from 1 to 5 inclusive\r\n    val oneToFive = 1 to 5\r\n    println(s\"Range from 1 to 5 inclusive = $oneToFive\")\r\n    //Create a numeric range from 1 to 5 but excluding the last integer number 5\r\n    val oneUntilFive = 1 until 5\r\n    println(s\"Range from 1 until 5 where 5 is excluded = $oneUntilFive\")\r\n    //Create a numeric range from 0 to 10 but increment with multiples of 2\r\n    val zeroToTenBy2 = 0 to 10 by 2\r\n    println(s\"Range from 0 to 10 with multiples of 2 = $zeroToTenBy2\")\r\n    //Create an alphabetical range to represent letter a to z\r\n    val aToz = 'a' to 'z'\r\n    println(s\"Range of alphabets from a to z = $aToz\")\r\n\r\n    aToz.foreach(println) //To print the list\r\n\r\n    //Character ranges with user specified increment\r\n    val aTozBy2 = 'a' to 'z' by 2\r\n    println(s\"Range of every other alphabet = $aTozBy2\")\r\n\r\n  }\r\n\r\n  def RangeToCollection():Unit={\r\n    val listOneToFive = (1 to 5).toList\r\n    println(s\"Range to list = ${listOneToFive.mkString(\" \")}\")\r\n    listOneToFive.foreach(print(_)) //also prints the list.\r\n\r\n    val setOneToFive = (1 to 5).toSet\r\n    println(s\"Range to set = ${setOneToFive.mkString(\" \")}\")\r\n\r\n    val seqOneToFive = (1 to 5).toSeq\r\n    println(s\"Range to sequence = ${seqOneToFive.mkString(\" \")}\")\r\n\r\n    val arrOneToFive = (1 to 5).toArray\r\n    println(s\"Range to array = ${arrOneToFive.mkString(\" \")}\")\r\n  }\r\n\r\n  def WhileLoop():Unit={\r\n    //How to use while loop in Scala\r\n    var mangoes = 10\r\n    while (mangoes > 0) {\r\n      println(s\"Remaining mangoes = $mangoes\")\r\n      mangoes -= 1 //Ate one mango\r\n    }\r\n    //How to use do while loop in Scala\r\n    mangoes = 0\r\n    do {\r\n      mangoes += 1 //Pluck mango from tree\r\n      println(s\"Mangoes plucked = $mangoes\")\r\n    } while (mangoes < 5)\r\n\r\n  }\r\n\r\n  def MatchExample():Unit={\r\n    val mangoVariety = \"Alphonso\"\r\n    val taste = mangoVariety match {\r\n      case \"Alphonso\" | \"Badami\" => \"Very sweet\"\r\n      case mango if (mangoVariety.contains(\"Naturally Riped\") || mangoVariety.contains(\"Organic\")) => \"Healthy\"\r\n      case \"Fazli\" => \"Sweet\"  //Ordinary case statement\r\n      case _ => \"Ok\" //Default case\r\n    }\r\n    println(s\"Taste of $mangoVariety = $taste\")\r\n\r\n  }\r\n\r\n  def MatchTypesExample():Unit={\r\n    val priceOfMango: Any = 10.00\r\n    val typeOfPrice = priceOfMango match {\r\n      case price: Int => \"Int\"\r\n      case price: Double => \"Double\"\r\n      case price: Float => \"Float\"\r\n      case price: String => \"String\"\r\n      case price: Boolean => \"Boolean\"\r\n      case price: Char => \"Char\"\r\n      case price: Long => \"Long\"\r\n    }\r\n    println(s\"Mango price type = $typeOfPrice\")\r\n\r\n  }\r\n\r\n  def TuplesExample():Unit={\r\n    val mangoTaste = Tuple2(\"Alphonso\", \"Very Sweet\")\r\n    println(s\"We have = $mangoTaste\")\r\n\r\n    val variety = mangoTaste._1\r\n    val taste = mangoTaste._2\r\n    println(s\"$variety taste is $taste\")\r\n\r\n    val mangoTastePrice = Tuple3(\"Alphonso\", \"Very Sweet\", 35.50) //Is same as\r\n    val mangoTastePrice2 = (\"Badami\", \"Sweet\", 20.50) //No need to put Tuple3 due to type inference\r\n    println(s\"${mangoTastePrice._1} taste is ${mangoTastePrice._2} and it's price is ${mangoTastePrice._3}\")\r\n\r\n  }\r\n\r\n  def OptionExample():Unit={\r\n    val alphonsoTaste: Option[String] = Some(\"Very Sweet\") //Option is equivalent to nullable but safe\r\n    println(s\"Alphonso taste = ${alphonsoTaste.get}\") //Can result in null pointer exception if Some is not set\r\n    val mangoName: Option[String] = None //Safely mark no value\r\n    //mangoName.get()\r\n    println(s\"Mango name = ${mangoName.getOrElse(\"Don't Know\")}\")\r\n  }\r\n\r\n  def AnyExample():Unit={\r\n    val favoriteMango: Any = \"Alphonso\"\r\n    println(s\"Favorite mango of type Any = $favoriteMango\")\r\n    val alphonsoMango: AnyRef = \"Alphonso\"\r\n    println(s\"Name of mango type AnyRef = $alphonsoMango\")\r\n    val alphonsoPrice: AnyVal = 35.50\r\n    println(s\"Alphonso price of type AnyVal = $alphonsoPrice\")\r\n  }\r\n\r\n  def EnumExample():Unit={\r\n    object Mango extends Enumeration {\r\n      type Mango = Value\r\n\r\n      val Alphonso = Value(\"Alphonso\")\r\n      val Badami = Value(\"Badami\")\r\n      val Himsagar = Value(\"Himsagar\")\r\n      val Fazli = Value(\"Fazli\")\r\n    }\r\n\r\n    println(s\"Alphonso mango string value = ${Mango.Alphonso}\")\r\n    println(s\"Alphonso mango's id = ${Mango.Alphonso.id}\")\r\n    println(s\"Mango types = ${Mango.values}\")\r\n\r\n  }\r\n\r\n  def EnumWithChangedOrder():Unit={\r\n    object MangoTaste extends Enumeration{\r\n      type MangoTaste = Value\r\n      val Sweet = Value(0, \"Sweet\")\r\n      val VerySweet = Value(1, \"Very Sweet\")\r\n      val Ok = Value(-1, \"Ok\")\r\n    }\r\n    println(s\"Mango taste values = ${MangoTaste.values}\")\r\n    println(s\"Mango taste of OK id = ${MangoTaste.Ok.id}\")\r\n  }\r\n}\r\n\r\nval basics:ScalaLanguageBasics = new ScalaLanguageBasics()\r\n    basics.HelloWorld();\r\n    basics.ImmutableVariables()\r\n    basics.MutableVariables()\r\n    System.out.println(basics.LazyInitialization());\r\n    basics.SupportedDataTypes()\r\n    basics.InitializeWithoutValue()\r\n    basics.StringInterpolation()\r\n    basics.StringInterpolationFormatted()\r\n    basics.MultiLineString()\r\n    basics.TypeInference()\r\n    basics.TypeConversion()\r\n    basics.IfElseElseIfExample()\r\n    basics.ForLoop()\r\n    basics.ForLoopContinued()\r\n    basics.ForLoop2DimArray()\r\n    basics.RangeExamples()\r\n    basics.RangeToCollection()\r\n    basics.WhileLoop()\r\n    basics.MatchExample()\r\n    basics.MatchTypesExample()\r\n    basics.TuplesExample()\r\n    basics.OptionExample()\r\n    basics.AnyExample()\r\n    basics.EnumExample()\r\n    basics.EnumWithChangedOrder()","user":"admin","dateUpdated":"2019-10-21T01:16:43+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Hello World! How are you today?\nOrange\nMy favorite fruit = Mango\nMy another favorite fruit name = Orange, taste = Sweet\nAre we buying 10 mangoes = true\nDryFruit price = 500.5\nFormatted DryFruit price = 500.50\nFavorite DryFruit\\tAlmond\nFruitLabel = \n{\n\"fruit\":\"Mango\",\n\"state\":\"Ripe\",\n\"price\":8.50\n}\n      \nFruitLabel = \n{\n\"fruit\":\"Mango\",\n\"state\":\"Raw\",\n\"price\":3.00\n}\n      \nNumber of mango baskets = 2\nNumber of mango baskets = 2\nNumber of mangoes = 1\nNumber of mangoes = 2\nNumber of mangoes = 3\nNumber of mangoes = 4\nNumber of mangoes = 5\nNumber of mangoes = 1\nNumber of mangoes = 2\nNumber of mangoes = 3\nNumber of mangoes = 4\nFound best mangoes = List(Alphonso, Dasheri, Badami, Himsagar, Fazli)\nFound best mangoes = List(Alphonso, Dasheri, Badami, Himsagar, Fazli)\nSweetening ingredients = List(Alphonso, Dasheri)\nMango at index (0,0) = Alphonso\nMango at index (0,1) = Dasheri\nMango at index (1,0) = Badami\nMango at index (1,1) = Fazli\nRange from 1 to 5 inclusive = Range(1, 2, 3, 4, 5)\nRange from 1 until 5 where 5 is excluded = Range(1, 2, 3, 4)\nRange from 0 to 10 with multiples of 2 = Range(0, 2, 4, 6, 8, 10)\nRange of alphabets from a to z = NumericRange(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\nRange of every other alphabet = NumericRange(a, c, e, g, i, k, m, o, q, s, u, w, y)\nRange to list = 1 2 3 4 5\n12345Range to set = 5 1 2 3 4\nRange to sequence = 1 2 3 4 5\nRange to array = 1 2 3 4 5\nRemaining mangoes = 10\nRemaining mangoes = 9\nRemaining mangoes = 8\nRemaining mangoes = 7\nRemaining mangoes = 6\nRemaining mangoes = 5\nRemaining mangoes = 4\nRemaining mangoes = 3\nRemaining mangoes = 2\nRemaining mangoes = 1\nMangoes plucked = 1\nMangoes plucked = 2\nMangoes plucked = 3\nMangoes plucked = 4\nMangoes plucked = 5\nTaste of Alphonso = Very sweet\nMango price type = Double\nWe have = (Alphonso,Very Sweet)\nAlphonso taste is Very Sweet\nAlphonso taste is Very Sweet and it's price is 35.5\nAlphonso taste = Very Sweet\nMango name = Don't Know\nFavorite mango of type Any = Alphonso\nName of mango type AnyRef = Alphonso\nAlphonso price of type AnyVal = 35.5\nAlphonso mango string value = Alphonso\nAlphonso mango's id = 0\nMango types = 2.ValueSet(Alphonso, Badami, Himsagar, Fazli)\nMango taste values = 2.ValueSet(Ok, Sweet, Very Sweet)\nMango taste of OK id = -1\ndefined class ScalaLanguageBasics\nbasics: ScalaLanguageBasics = ScalaLanguageBasics@4170b05a\n"}]},"apps":[],"jobName":"paragraph_1571577862362_1323957365","id":"20191020-132422_1588493262","dateCreated":"2019-10-20T13:24:22+0000","dateStarted":"2019-10-21T01:16:43+0000","dateFinished":"2019-10-21T01:16:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:6514"},{"user":"admin","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1571578131479_-2026643933","id":"20191020-132851_1137454494","dateCreated":"2019-10-20T13:28:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:6515","dateUpdated":"2019-10-21T01:16:45+0000"}],"name":"ScalaBasics","id":"2ERDVAA4B","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}