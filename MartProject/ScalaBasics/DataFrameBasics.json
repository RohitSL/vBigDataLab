{"paragraphs":[{"text":"import org.apache.spark.sql.Row\r\nimport org.apache.spark.sql.functions._\r\nimport org.apache.spark.sql.types.{IntegerType, StringType, StructField, StructType}\r\nimport spark.implicits._\r\n\r\nclass SparkDataFrameBasics {\r\n\r\n  def DFCreate(): Unit = {\r\n    val inputPath = \"/SampleData\"\r\n\r\n    /** toDF method - Recommended for terse code */\r\n    val someDF1 = Seq(\r\n      (8, \"bat\"),\r\n      (64, \"mouse\"),\r\n      (-27, \"horse\")\r\n    ).toDF(\"number\", \"word\")\r\n\r\n    someDF1.show()\r\n\r\n\r\n    /** CreateDataFrame method - Recommended for schema customization */\r\n    //Step 1: load data in a Seq collection as rows\r\n    val someData = Seq(\r\n      Row(8, \"bat\"),\r\n      Row(64, \"mouse\"),\r\n      Row(-27, \"horse\"),\r\n      Row(10, \"goat\")\r\n    )\r\n    //Step 2: Load schema in a List using StructField\r\n    val someSchema = List(\r\n      StructField(\"number\", IntegerType, true),\r\n      StructField(\"word\", StringType, true)\r\n    )\r\n\r\n    //Step 3: Use createDataFrame and pass data and schema to get Data frame.\r\n    val someDF2 = spark.createDataFrame(\r\n      sc.parallelize(someData), StructType(someSchema)\r\n    )\r\n\r\n\r\n    /** Creating Data Frame from an RDD */\r\n    //Seq of columns\r\n    val columns = Seq(\"language\", \"users_count\")\r\n    //Data in Seq collection\r\n    val data = Seq((\"Java\", \"20000\"), (\"Python\", \"100000\"), (\"Scala\", \"3000\"))\r\n    //Use parallelize to create rdd from data\r\n    val rdd = sc.parallelize(data)\r\n    //Method 1 calling toDF() on rdd passing column names directly\r\n    val dfFromRDD1 = rdd.toDF(\"language\", \"users_count\")\r\n    //Method 2 calling toDF() on rdd passing column name via Seq collection\r\n    val dfFromRDD2 = spark.createDataFrame(rdd).toDF(columns: _*)\r\n\r\n    /** From CSV */\r\n    val df2 = spark.read\r\n      .csv(s\"$inputPath/questions_10K.csv\")\r\n    df2.show(10)\r\n\r\n    /** From Hive\r\n     * More on Hive in when we cover ETL\r\n     * */\r\n    //val hiveContext = new org.apache.spark.sql.hive.HiveContext(sc)\r\n    //hiveContext.sql(\"create table if not exists allperson(first_name string, last_name string, age int) row format delimited fields terminated by ',' lines terminated by '\\n' stored as textfile \")\r\n    //Loading data from a file\r\n    //hiveContext.sql(s\"load data local inpath '$inputPath/persons' into table allperson\")\r\n    //val hiveDF = hiveContext.sql(\"select * from allperson\")\r\n    //hiveDF.show()\r\n\r\n    /** From JSON\r\n     * */\r\n    val df = spark.read.json(s\"$inputPath/people.json\")\r\n    df.show()\r\n\r\n    /** From SparkSQL\r\n     * More on SparkSQL in next session when we cover statistical analytics */\r\n    df.createOrReplaceTempView(\"peopleTable\")\r\n    val dfSql = spark.sqlContext.sql(\"SELECT * FROM peopleTable\")\r\n    dfSql.show()\r\n\r\n    /** From RDBMS\r\n     * Working example when we cover ETL in next session */\r\n    //    val df_mysql = spark.read.format(\"jdbc\")\r\n    //      .option(\"url\", \"jdbc:mysql://localhost/db\")\r\n    //      .option(\"driver\", \"com.mysql.jdbc.Driver\")\r\n    //      .option(\"dbtable\", \"tablename\")\r\n    //      .option(\"user\", \"user\")\r\n    //      .option(\"password\", \"password\")\r\n    //      .load()\r\n\r\n  }\r\n\r\n\r\n  def DFOperations(): Unit = {\r\n\r\n    val inputPath = \"/SampleData\"\r\n    /** Reading data frame from CSV with schema inference */\r\n    val dfTags = spark\r\n      .read\r\n      .option(\"header\", \"true\")\r\n      .option(\"inferSchema\", \"true\")\r\n      .csv(s\"$inputPath/question_tags_10K.csv\")\r\n      .toDF(\"id\", \"tag\")\r\n    //See data\r\n    dfTags.show(10)\r\n    //See schema of the data frame\r\n    dfTags.printSchema()\r\n    //See only few columns\r\n    dfTags.select(\"id\", \"tag\").show(10)\r\n    //Filter data frame rows\r\n    dfTags.filter(\"tag == 'php'\").show(10)\r\n    //Count with filter\r\n    println(s\"Number of php tags = ${dfTags.filter(\"tag == 'php'\").count()}\")\r\n    //Usage of like operator\r\n    dfTags.filter(\"tag like 's%'\").show(10)\r\n    //Combining filters\r\n    dfTags\r\n      .filter(\"tag like 's%'\")\r\n      .filter(\"id == 25 or id == 108\")\r\n      .show(10)\r\n    //Usage of in operator\r\n    dfTags.filter(\"id in (25, 108)\").show(10)\r\n    //Groupby operator with count aggregation\r\n    dfTags.groupBy(\"tag\").count().show(10)\r\n    //Groupby with filter\r\n    dfTags.groupBy(\"tag\").count().filter(\"count > 5\").show(10)\r\n    //Groupby aggregation filter orderby together\r\n    dfTags.groupBy(\"tag\").count().filter(\"count > 5\").orderBy(\"tag\").show(10)\r\n\r\n    //Reading using specific schema\r\n    val dfQuestionsCSV = spark\r\n      .read\r\n      .option(\"header\", \"true\")\r\n      .option(\"inferSchema\", \"true\")\r\n      .option(\"dateFormat\", \"yyyy-MM-dd HH:mm:ss\")\r\n      .csv(s\"$inputPath/questions_10K.csv\")\r\n      .toDF(\"id\", \"creation_date\", \"closed_date\", \"deletion_date\", \"score\", \"owner_userid\", \"answer_count\")\r\n    //See schema inferred\r\n    dfQuestionsCSV.printSchema()\r\n    //Adding user schema\r\n    val dfQuestions = dfQuestionsCSV.select(\r\n      dfQuestionsCSV.col(\"id\").cast(\"integer\"),\r\n      dfQuestionsCSV.col(\"creation_date\").cast(\"timestamp\"),\r\n      dfQuestionsCSV.col(\"closed_date\").cast(\"timestamp\"),\r\n      dfQuestionsCSV.col(\"deletion_date\").cast(\"date\"),\r\n      dfQuestionsCSV.col(\"score\").cast(\"integer\"),\r\n      dfQuestionsCSV.col(\"owner_userid\").cast(\"integer\"),\r\n      dfQuestionsCSV.col(\"answer_count\").cast(\"integer\")\r\n    )\r\n    //See user defined schema applied\r\n    dfQuestions.printSchema()\r\n    //See data in user defined schema\r\n    dfQuestions.show(10)\r\n\r\n    //Creating a subset data frame\r\n    val dfQuestionsSubset = dfQuestions.filter(\"score > 400 and score < 410\").toDF()\r\n\r\n    dfQuestionsSubset.show()\r\n    //Join two dataframes\r\n    dfQuestionsSubset.join(dfTags, \"id\").show(10)\r\n    //Join with select\r\n    dfQuestionsSubset\r\n      .join(dfTags, \"id\")\r\n      .select(\"owner_userid\", \"tag\", \"creation_date\", \"score\")\r\n      .show(10)\r\n    //Join specific columns\r\n    dfQuestionsSubset\r\n      .join(dfTags, dfTags(\"id\") === dfQuestionsSubset(\"id\"))\r\n      .show(10)\r\n    //Join type inner\r\n    dfQuestionsSubset\r\n      .join(dfTags, Seq(\"id\"), \"inner\")\r\n      .show(10)\r\n    //join type left outer\r\n    dfQuestionsSubset\r\n      .join(dfTags, Seq(\"id\"), \"left_outer\")\r\n      .show(10)\r\n    //join type right outer\r\n    dfTags\r\n      .join(dfQuestionsSubset, Seq(\"id\"), \"right_outer\")\r\n      .show(10)\r\n    //Use of distinct. Here distinct column tag\r\n    dfTags\r\n      .select(\"tag\")\r\n      .distinct()\r\n      .show(10)\r\n\r\n    /**Sql statistical functions, below import is required*/\r\n    //import org.apache.spark.sql.functions._\r\n    //Average\r\n    dfQuestions\r\n      .select(avg(\"score\"))\r\n      .show()\r\n    //Max\r\n    dfQuestions\r\n      .select(max(\"score\"))\r\n      .show()\r\n    //Min\r\n    dfQuestions\r\n      .select(min(\"score\"))\r\n      .show()\r\n    //Mean\r\n    dfQuestions\r\n      .select(mean(\"score\"))\r\n      .show()\r\n    //Sum\r\n    dfQuestions\r\n      .select(sum(\"score\"))\r\n      .show()\r\n    //Multiple aggregations with group by\r\n    dfQuestions\r\n      .filter(\"id > 400 and id < 450\")\r\n      .filter(\"owner_userid is not null\")\r\n      .join(dfTags, dfQuestions.col(\"id\").equalTo(dfTags(\"id\")))\r\n      .groupBy(dfQuestions.col(\"owner_userid\"))\r\n      .agg(avg(\"score\"), max(\"answer_count\"))\r\n      .show()\r\n    //Describe the data frame generic statistical properties\r\n    val dfQuestionsStatistics = dfQuestions.describe()\r\n    dfQuestionsStatistics.show()\r\n\r\n    //Correlation between two columns\r\n    val correlation = dfQuestions.stat.corr(\"score\", \"answer_count\")\r\n    println(s\"correlation between column score and answer_count = $correlation\")\r\n    //Co-variance between two columns\r\n    val covariance = dfQuestions.stat.cov(\"score\", \"answer_count\")\r\n    println(s\"covariance between column score and answer_count = $covariance\")\r\n    //Frequency\r\n    val dfFrequentScore = dfQuestions.stat.freqItems(Seq(\"answer_count\"))\r\n    dfFrequentScore.show()\r\n    //Cross tab - Rows to columns and columns to rows\r\n    val dfScoreByUserid = dfQuestions\r\n      .filter(\"owner_userid > 0 and owner_userid < 20\")\r\n      .stat\r\n      .crosstab(\"score\", \"owner_userid\")\r\n\r\n    dfScoreByUserid.show(10)\r\n\r\n\r\n    // Filter on aggregated values. Similar to groupby having in SQL.\r\n    // find all rows where answer_count in (5, 10, 20)\r\n    val dfQuestionsByAnswerCount = dfQuestions\r\n      .filter(\"owner_userid > 0\")\r\n      .filter(\"answer_count in (5, 10, 20)\")\r\n\r\n    // count how many rows match answer_count in (5, 10, 20)\r\n    dfQuestionsByAnswerCount\r\n      .groupBy(\"answer_count\")\r\n      .count()\r\n      .show()\r\n\r\n    // Create a fraction map where we are only interested:\r\n    // - 50% of the rows that have answer_count = 5\r\n    // - 10% of the rows that have answer_count = 10\r\n    // - 100% of the rows that have answer_count = 20\r\n    // Note also that fractions should be in the range [0, 1]\r\n    val fractionKeyMap = Map(5 -> 0.5, 10 -> 0.1, 20 -> 1.0)\r\n\r\n    // Stratified sample using the fractionKeyMap.\r\n    dfQuestionsByAnswerCount\r\n      .stat\r\n      .sampleBy(\"answer_count\", fractionKeyMap, 7L)\r\n      .groupBy(\"answer_count\")\r\n      .count()\r\n      .show()\r\n\r\n    // Note that changing the random seed will modify your sampling outcome.\r\n    // Changing the random seed to 37.\r\n    dfQuestionsByAnswerCount\r\n      .stat\r\n      .sampleBy(\"answer_count\", fractionKeyMap, 37L)\r\n      .groupBy(\"answer_count\")\r\n      .count()\r\n      .show()\r\n\r\n    // Approximate Quantile. Dividing frequency distribution to groups\r\n    val quantiles = dfQuestions\r\n      .stat\r\n      .approxQuantile(\"score\", Array(0, 0.5, 1), 0.25)\r\n    println(s\"Qauntiles segments = ${quantiles.toSeq}\")\r\n\r\n    // Bloom Filter - Element is definitely not in the set or may be in the set.\r\n    val tagsBloomFilter = dfTags.stat.bloomFilter(\"tag\", 1000L, 0.1)\r\n\r\n    println(s\"bloom filter contains java tag = ${tagsBloomFilter.mightContain(\"java\")}\")\r\n    println(s\"bloom filter contains some unknown tag = ${tagsBloomFilter.mightContain(\"unknown tag\")}\")\r\n\r\n    // Count Min Sketch - Counting frequencies using hash. It may over count some frequencies due to collisions\r\n    val cmsTag = dfTags.stat.countMinSketch(\"tag\", 0.1, 0.9, 37)\r\n    val estimatedFrequency = cmsTag.estimateCount(\"java\")\r\n    println(s\"Estimated frequency for tag java = $estimatedFrequency\")\r\n\r\n    // Sampling With Replacement - Sampling where probability of one does not affect the probability outcome of another sample.\r\n    val dfTagsSample = dfTags.sample(true, 0.2, 37L)\r\n    println(s\"Number of rows in sample dfTagsSample = ${dfTagsSample.count()}\")\r\n    println(s\"Number of rows in dfTags = ${dfTags.count()}\")\r\n\r\n\r\n    //Getting a paired DF\r\n    val seqTags = Seq(\r\n      1 -> \"so_java\",\r\n      1 -> \"so_jsp\",\r\n      2 -> \"so_erlang\",\r\n      3 -> \"so_scala\",\r\n      3 -> \"so_akka\"\r\n    )\r\n\r\n    import spark.implicits._\r\n    val dfMoreTags = seqTags.toDF(\"id\", \"tag\")\r\n    dfMoreTags.show(10)\r\n\r\n    //Use of union\r\n    val dfUnionOfTags = dfTags\r\n      .union(dfMoreTags)\r\n      .filter(\"id in (1,3)\")\r\n    dfUnionOfTags.show(10)\r\n    //use of intersection\r\n    val dfIntersectionTags = dfMoreTags\r\n      .intersect(dfUnionOfTags)\r\n      .show(10)\r\n\r\n    //Adding a column and aliasing\r\n    //      import org.apache.spark.sql.functions._\r\n    val dfSplitColumn = dfMoreTags\r\n      .withColumn(\"tmp\", split($\"tag\", \"_\"))\r\n      .select(\r\n        $\"id\",\r\n        $\"tag\",\r\n        $\"tmp\".getItem(0).as(\"so_prefix\"),\r\n        $\"tmp\".getItem(1).as(\"so_tag\")\r\n      ).drop(\"tmp\")\r\n    dfSplitColumn.show(10)\r\n\r\n    //Specifying names\r\n    val mangoes = Seq((\"Alphonso\", 1.50), (\"Margo\", 2.0), (\"Fazli\", 2.50))\r\n    val dfMangoes = spark.createDataFrame(mangoes)\r\n      .toDF(\"Name\", \"Price\")\r\n    dfMangoes.show()\r\n    val columnNames: Array[String] = dfMangoes.columns\r\n    columnNames.foreach(name => println(s\"$name\"))\r\n\r\n    val (colNames, colDataTypes) = dfMangoes.dtypes.unzip //Converts an array of column names and data types to separate arrays of names and types\r\n    println(s\"DataFrame column names = ${colNames.mkString(\", \")}\")\r\n    println(s\"DataFrame column data types = ${colDataTypes.mkString(\", \")}\")\r\n\r\n\r\n    //Column exists\r\n    val mangoes1 = Seq((\"111\", \"Alphonso\", 1.50), (\"222\", \"Dasheri\", 2.0), (\"333\", \"Fazli\", 2.50))\r\n\r\n    val mangoesDF = spark.createDataFrame(mangoes1)\r\n      .toDF(\"Id\", \"Name\", \"Price\")\r\n    mangoesDF.show()\r\n\r\n    val priceColumnExists = mangoesDF.columns.contains(\"Price\")\r\n    println(s\"Does price column exist = $priceColumnExists\")\r\n\r\n    //Sub column data frame\r\n    val inventory = Seq((\"111\", 10), (\"222\", 20), (\"333\", 30))\r\n    val dfInventory = spark\r\n      .createDataFrame(inventory)\r\n      .toDF(\"Id\", \"Inventory\")\r\n    dfInventory.show()\r\n\r\n    //Joining the sub column back\r\n    val dfMangoInventory = mangoesDF.join(dfInventory, Seq(\"Id\"), \"inner\")\r\n    dfMangoInventory.show()\r\n\r\n  }\r\n}\r\n\r\n\r\nval dfBasics:SparkDataFrameBasics = new SparkDataFrameBasics()\r\n  dfBasics.DFCreate()\r\n  dfBasics.DFOperations()","user":"admin","dateUpdated":"2019-10-21T01:15:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-----+\n|number| word|\n+------+-----+\n|     8|  bat|\n|    64|mouse|\n|   -27|horse|\n+------+-----+\n\n+---+--------------------+--------------------+--------------------+-----+-----------+-----------+\n|_c0|                 _c1|                 _c2|                 _c3|  _c4|        _c5|        _c6|\n+---+--------------------+--------------------+--------------------+-----+-----------+-----------+\n| Id|        CreationDate|          ClosedDate|        DeletionDate|Score|OwnerUserId|AnswerCount|\n|  1|2008-07-31T21:26:37Z|                  NA|2011-03-28T00:53:47Z|    1|         NA|          0|\n|  4|2008-07-31T21:42:52Z|                  NA|                  NA|  472|          8|         13|\n|  6|2008-07-31T22:08:08Z|                  NA|                  NA|  210|          9|          5|\n|  8|2008-07-31T23:33:19Z|2013-06-03T04:00:25Z|2015-02-11T08:26:40Z|   42|         NA|          8|\n|  9|2008-07-31T23:40:59Z|                  NA|                  NA| 1452|          1|         58|\n| 11|2008-07-31T23:55:37Z|                  NA|                  NA| 1154|          1|         33|\n| 13|2008-08-01T00:42:38Z|                  NA|                  NA|  464|          9|         25|\n| 14|2008-08-01T00:59:11Z|                  NA|                  NA|  296|         11|          8|\n| 16|2008-08-01T04:59:33Z|                  NA|                  NA|   84|          2|          5|\n+---+--------------------+--------------------+--------------------+-----+-----------+-----------+\nonly showing top 10 rows\n\n+----+-------+\n| age|   name|\n+----+-------+\n|null|Michael|\n|  30|   Andy|\n|  19| Justin|\n+----+-------+\n\n+----+-------+\n| age|   name|\n+----+-------+\n|null|Michael|\n|  30|   Andy|\n|  19| Justin|\n+----+-------+\n\n+---+-------------------+\n| id|                tag|\n+---+-------------------+\n|  1|               data|\n|  4|                 c#|\n|  4|           winforms|\n|  4|    type-conversion|\n|  4|            decimal|\n|  4|            opacity|\n|  6|               html|\n|  6|                css|\n|  6|               css3|\n|  6|internet-explorer-7|\n+---+-------------------+\nonly showing top 10 rows\n\nroot\n |-- id: integer (nullable = true)\n |-- tag: string (nullable = true)\n\n+---+-------------------+\n| id|                tag|\n+---+-------------------+\n|  1|               data|\n|  4|                 c#|\n|  4|           winforms|\n|  4|    type-conversion|\n|  4|            decimal|\n|  4|            opacity|\n|  6|               html|\n|  6|                css|\n|  6|               css3|\n|  6|internet-explorer-7|\n+---+-------------------+\nonly showing top 10 rows\n\n+---+---+\n| id|tag|\n+---+---+\n| 23|php|\n| 42|php|\n| 85|php|\n|126|php|\n|146|php|\n|227|php|\n|249|php|\n|328|php|\n|588|php|\n|657|php|\n+---+---+\nonly showing top 10 rows\n\nNumber of php tags = 133\n+---+-------------+\n| id|          tag|\n+---+-------------+\n| 25|      sockets|\n| 36|          sql|\n| 36|   sql-server|\n| 40| structuremap|\n| 48|submit-button|\n| 79|          svn|\n| 79|    subclipse|\n| 85|          sql|\n| 90|          svn|\n|108|          svn|\n+---+-------------+\nonly showing top 10 rows\n\n+---+-------+\n| id|    tag|\n+---+-------+\n| 25|sockets|\n|108|    svn|\n+---+-------+\n\n+---+---------+\n| id|      tag|\n+---+---------+\n| 25|      c++|\n| 25|        c|\n| 25|  sockets|\n| 25|mainframe|\n| 25|      zos|\n|108|  windows|\n|108|      svn|\n|108|    64bit|\n+---+---------+\n\n+--------------------+-----+\n|                 tag|count|\n+--------------------+-----+\n|         type-safety|    4|\n|             jbutton|    1|\n|              iframe|    2|\n|           svn-hooks|    2|\n|           standards|    7|\n|knowledge-management|    2|\n|            trayicon|    1|\n|           arguments|    1|\n|                 zfs|    1|\n|              import|    3|\n+--------------------+-----+\nonly showing top 10 rows\n\n+----------------+-----+\n|             tag|count|\n+----------------+-----+\n|       standards|    7|\n|        keyboard|    8|\n|             rss|   12|\n|   documentation|   15|\n|         session|    6|\n|build-automation|    9|\n|            unix|   34|\n|          iphone|   16|\n|             xss|    6|\n| database-design|   12|\n+----------------+-----+\nonly showing top 10 rows\n\n+----------------+-----+\n|             tag|count|\n+----------------+-----+\n|            .net|  351|\n|        .net-2.0|   14|\n|        .net-3.5|   30|\n|           64bit|    7|\n|  actionscript-3|   22|\n|active-directory|   10|\n|         ado.net|   11|\n|           adobe|    7|\n|           agile|    8|\n|             air|   11|\n+----------------+-----+\nonly showing top 10 rows\n\nroot\n |-- id: integer (nullable = true)\n |-- creation_date: timestamp (nullable = true)\n |-- closed_date: string (nullable = true)\n |-- deletion_date: string (nullable = true)\n |-- score: integer (nullable = true)\n |-- owner_userid: string (nullable = true)\n |-- answer_count: string (nullable = true)\n\nroot\n |-- id: integer (nullable = true)\n |-- creation_date: timestamp (nullable = true)\n |-- closed_date: timestamp (nullable = true)\n |-- deletion_date: date (nullable = true)\n |-- score: integer (nullable = true)\n |-- owner_userid: integer (nullable = true)\n |-- answer_count: integer (nullable = true)\n\n+---+-------------------+-------------------+-------------+-----+------------+------------+\n| id|      creation_date|        closed_date|deletion_date|score|owner_userid|answer_count|\n+---+-------------------+-------------------+-------------+-----+------------+------------+\n|  1|2008-07-31 21:26:37|               null|   2011-03-28|    1|        null|           0|\n|  4|2008-07-31 21:42:52|               null|         null|  472|           8|          13|\n|  6|2008-07-31 22:08:08|               null|         null|  210|           9|           5|\n|  8|2008-07-31 23:33:19|2013-06-03 04:00:25|   2015-02-11|   42|        null|           8|\n|  9|2008-07-31 23:40:59|               null|         null| 1452|           1|          58|\n| 11|2008-07-31 23:55:37|               null|         null| 1154|           1|          33|\n| 13|2008-08-01 00:42:38|               null|         null|  464|           9|          25|\n| 14|2008-08-01 00:59:11|               null|         null|  296|          11|           8|\n| 16|2008-08-01 04:59:33|               null|         null|   84|           2|           5|\n| 17|2008-08-01 05:09:55|               null|         null|  119|           2|          11|\n+---+-------------------+-------------------+-------------+-----+------------+------------+\nonly showing top 10 rows\n\n+-----+-------------------+-------------------+-------------+-----+------------+------------+\n|   id|      creation_date|        closed_date|deletion_date|score|owner_userid|answer_count|\n+-----+-------------------+-------------------+-------------+-----+------------+------------+\n|  888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|\n| 1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|\n| 3881|2008-08-06 19:26:30|2016-09-23 13:34:31|         null|  402|         122|          27|\n|16100|2008-08-19 12:51:55|               null|         null|  406|         203|          19|\n|28098|2008-08-26 13:56:49|               null|         null|  403|        2680|          23|\n|28637|2008-08-26 17:09:45|               null|         null|  401|        2469|          15|\n|41479|2008-09-03 11:29:57|               null|         null|  406|        3394|          86|\n|50467|2008-09-08 19:21:19|               null|         null|  402|        1967|          34|\n|56628|2008-09-11 14:08:11|               null|         null|  403|        5469|          19|\n|64860|2008-09-15 17:21:31|               null|         null|  402|        2948|          12|\n+-----+-------------------+-------------------+-------------+-----+------------+------------+\n\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\n|  id|      creation_date|        closed_date|deletion_date|score|owner_userid|answer_count|                 tag|\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|              xdebug|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|            phpstorm|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|           debugging|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|             eclipse|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|                 php|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|                 osx|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|                 ios|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|         objective-c|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|              iphone|\n|3881|2008-08-06 19:26:30|2016-09-23 13:34:31|         null|  402|         122|          27|illegalargumentex...|\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\nonly showing top 10 rows\n\n+------------+-----------+-------------------+-----+\n|owner_userid|        tag|      creation_date|score|\n+------------+-----------+-------------------+-----+\n|         131|        php|2008-08-03 23:18:21|  405|\n|         131|    eclipse|2008-08-03 23:18:21|  405|\n|         131|  debugging|2008-08-03 23:18:21|  405|\n|         131|   phpstorm|2008-08-03 23:18:21|  405|\n|         131|     xdebug|2008-08-03 23:18:21|  405|\n|        null|     iphone|2008-08-05 05:39:36|  408|\n|        null|objective-c|2008-08-05 05:39:36|  408|\n|        null|        ios|2008-08-05 05:39:36|  408|\n|        null|        osx|2008-08-05 05:39:36|  408|\n|         122|       java|2008-08-06 19:26:30|  402|\n+------------+-----------+-------------------+-----+\nonly showing top 10 rows\n\n+----+-------------------+-------------------+-------------+-----+------------+------------+----+--------------------+\n|  id|      creation_date|        closed_date|deletion_date|score|owner_userid|answer_count|  id|                 tag|\n+----+-------------------+-------------------+-------------+-----+------------+------------+----+--------------------+\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30| 888|              xdebug|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30| 888|            phpstorm|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30| 888|           debugging|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30| 888|             eclipse|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30| 888|                 php|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|1939|                 osx|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|1939|                 ios|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|1939|         objective-c|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|1939|              iphone|\n|3881|2008-08-06 19:26:30|2016-09-23 13:34:31|         null|  402|         122|          27|3881|illegalargumentex...|\n+----+-------------------+-------------------+-------------+-----+------------+------------+----+--------------------+\nonly showing top 10 rows\n\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\n|  id|      creation_date|        closed_date|deletion_date|score|owner_userid|answer_count|                 tag|\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|              xdebug|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|            phpstorm|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|           debugging|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|             eclipse|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|                 php|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|                 osx|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|                 ios|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|         objective-c|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|              iphone|\n|3881|2008-08-06 19:26:30|2016-09-23 13:34:31|         null|  402|         122|          27|illegalargumentex...|\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\nonly showing top 10 rows\n\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\n|  id|      creation_date|        closed_date|deletion_date|score|owner_userid|answer_count|                 tag|\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|              xdebug|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|            phpstorm|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|           debugging|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|             eclipse|\n| 888|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|                 php|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|                 osx|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|                 ios|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|         objective-c|\n|1939|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|              iphone|\n|3881|2008-08-06 19:26:30|2016-09-23 13:34:31|         null|  402|         122|          27|illegalargumentex...|\n+----+-------------------+-------------------+-------------+-----+------------+------------+--------------------+\nonly showing top 10 rows\n\n+----+--------------------+-------------------+-------------------+-------------+-----+------------+------------+\n|  id|                 tag|      creation_date|        closed_date|deletion_date|score|owner_userid|answer_count|\n+----+--------------------+-------------------+-------------------+-------------+-----+------------+------------+\n| 888|              xdebug|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|\n| 888|            phpstorm|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|\n| 888|           debugging|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|\n| 888|             eclipse|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|\n| 888|                 php|2008-08-03 23:18:21|2016-08-04 09:22:00|         null|  405|         131|          30|\n|1939|                 osx|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|\n|1939|                 ios|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|\n|1939|         objective-c|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|\n|1939|              iphone|2008-08-05 05:39:36|2012-06-05 13:13:38|   2012-12-18|  408|        null|          48|\n|3881|illegalargumentex...|2008-08-06 19:26:30|2016-09-23 13:34:31|         null|  402|         122|          27|\n+----+--------------------+-------------------+-------------------+-------------+-----+------------+------------+\nonly showing top 10 rows\n\n+--------------------+\n|                 tag|\n+--------------------+\n|         type-safety|\n|             jbutton|\n|              iframe|\n|           svn-hooks|\n|           standards|\n|knowledge-management|\n|            trayicon|\n|           arguments|\n|                 zfs|\n|              import|\n+--------------------+\nonly showing top 10 rows\n\n+-----------------+\n|       avg(score)|\n+-----------------+\n|36.14631463146315|\n+-----------------+\n\n+----------+\n|max(score)|\n+----------+\n|      4443|\n+----------+\n\n+----------+\n|min(score)|\n+----------+\n|       -27|\n+----------+\n\n+-----------------+\n|       avg(score)|\n+-----------------+\n|36.14631463146315|\n+-----------------+\n\n+----------+\n|sum(score)|\n+----------+\n|    361427|\n+----------+\n\n+------------+----------+-----------------+\n|owner_userid|avg(score)|max(answer_count)|\n+------------+----------+-----------------+\n|         268|      26.0|                1|\n|         136|      57.6|                9|\n|         123|      20.0|                3|\n+------------+----------+-----------------+\n\n+-------+-----------------+------------------+-----------------+------------------+\n|summary|               id|             score|     owner_userid|      answer_count|\n+-------+-----------------+------------------+-----------------+------------------+\n|  count|             9999|              9999|             7388|              9922|\n|   mean|33929.17081708171| 36.14631463146315|47389.99472116947|6.6232614392259626|\n| stddev|19110.09560532429|160.48316753972045|280943.1070344427| 9.069109116851138|\n|    min|                1|               -27|                1|                -5|\n|    max|            66037|              4443|          3431280|               316|\n+-------+-----------------+------------------+-----------------+------------------+\n\ncorrelation between column score and answer_count = 0.3699847903294707\ncovariance between column score and answer_count = 537.513381444165\n+----------------------+\n|answer_count_freqItems|\n+----------------------+\n|  [23, 131, 77, 86,...|\n+----------------------+\n\n+------------------+---+---+---+---+---+---+---+---+---+---+\n|score_owner_userid|  1| 11| 13| 17|  2|  3|  4|  5|  8|  9|\n+------------------+---+---+---+---+---+---+---+---+---+---+\n|                56|  0|  0|  0|  1|  0|  0|  0|  0|  0|  0|\n|               472|  0|  0|  0|  0|  0|  0|  0|  0|  1|  0|\n|                14|  0|  0|  0|  1|  0|  0|  0|  1|  0|  0|\n|                20|  0|  0|  0|  0|  0|  0|  0|  1|  0|  0|\n|               179|  0|  0|  0|  0|  0|  1|  0|  0|  0|  0|\n|                84|  0|  0|  0|  0|  1|  0|  0|  0|  0|  0|\n|               160|  0|  0|  1|  0|  0|  0|  0|  0|  0|  0|\n|                21|  0|  0|  0|  0|  0|  0|  0|  1|  0|  0|\n|                 9|  0|  0|  0|  0|  0|  0|  1|  1|  0|  0|\n|                 2|  0|  0|  0|  0|  0|  0|  0|  1|  0|  1|\n+------------------+---+---+---+---+---+---+---+---+---+---+\nonly showing top 10 rows\n\n+------------+-----+\n|answer_count|count|\n+------------+-----+\n|          20|   34|\n|           5|  811|\n|          10|  272|\n+------------+-----+\n\n+------------+-----+\n|answer_count|count|\n+------------+-----+\n|          20|   34|\n|           5|  400|\n|          10|   26|\n+------------+-----+\n\n+------------+-----+\n|answer_count|count|\n+------------+-----+\n|          20|   34|\n|           5|  388|\n|          10|   25|\n+------------+-----+\n\nQauntiles segments = WrappedArray(-27.0, 2.0, 4443.0)\nbloom filter contains java tag = true\nbloom filter contains some unknown tag = false\nEstimated frequency for tag java = 513\nNumber of rows in sample dfTagsSample = 1948\nNumber of rows in dfTags = 9999\n+---+---------+\n| id|      tag|\n+---+---------+\n|  1|  so_java|\n|  1|   so_jsp|\n|  2|so_erlang|\n|  3| so_scala|\n|  3|  so_akka|\n+---+---------+\n\n+---+--------+\n| id|     tag|\n+---+--------+\n|  1|    data|\n|  1| so_java|\n|  1|  so_jsp|\n|  3|so_scala|\n|  3| so_akka|\n+---+--------+\n\n+---+--------+\n| id|     tag|\n+---+--------+\n|  3|so_scala|\n|  3| so_akka|\n|  1| so_java|\n|  1|  so_jsp|\n+---+--------+\n\n+---+---------+---------+------+\n| id|      tag|so_prefix|so_tag|\n+---+---------+---------+------+\n|  1|  so_java|       so|  java|\n|  1|   so_jsp|       so|   jsp|\n|  2|so_erlang|       so|erlang|\n|  3| so_scala|       so| scala|\n|  3|  so_akka|       so|  akka|\n+---+---------+---------+------+\n\n+--------+-----+\n|    Name|Price|\n+--------+-----+\n|Alphonso|  1.5|\n|   Margo|  2.0|\n|   Fazli|  2.5|\n+--------+-----+\n\nName\nPrice\nDataFrame column names = Name, Price\nDataFrame column data types = StringType, DoubleType\n+---+--------+-----+\n| Id|    Name|Price|\n+---+--------+-----+\n|111|Alphonso|  1.5|\n|222| Dasheri|  2.0|\n|333|   Fazli|  2.5|\n+---+--------+-----+\n\nDoes price column exist = true\n+---+---------+\n| Id|Inventory|\n+---+---------+\n|111|       10|\n|222|       20|\n|333|       30|\n+---+---------+\n\n+---+--------+-----+---------+\n| Id|    Name|Price|Inventory|\n+---+--------+-----+---------+\n|111|Alphonso|  1.5|       10|\n|222| Dasheri|  2.0|       20|\n|333|   Fazli|  2.5|       30|\n+---+--------+-----+---------+\n\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types.{IntegerType, StringType, StructField, StructType}\nimport spark.implicits._\ndefined class SparkDataFrameBasics\ndfBasics: SparkDataFrameBasics = SparkDataFrameBasics@781ebb3e\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://master:4040/jobs/job?id=132","http://master:4040/jobs/job?id=133","http://master:4040/jobs/job?id=134","http://master:4040/jobs/job?id=135","http://master:4040/jobs/job?id=136","http://master:4040/jobs/job?id=137","http://master:4040/jobs/job?id=138","http://master:4040/jobs/job?id=139","http://master:4040/jobs/job?id=140","http://master:4040/jobs/job?id=141","http://master:4040/jobs/job?id=142","http://master:4040/jobs/job?id=143","http://master:4040/jobs/job?id=144","http://master:4040/jobs/job?id=145","http://master:4040/jobs/job?id=146","http://master:4040/jobs/job?id=147","http://master:4040/jobs/job?id=148","http://master:4040/jobs/job?id=149","http://master:4040/jobs/job?id=150","http://master:4040/jobs/job?id=151","http://master:4040/jobs/job?id=152","http://master:4040/jobs/job?id=153","http://master:4040/jobs/job?id=154","http://master:4040/jobs/job?id=155","http://master:4040/jobs/job?id=156","http://master:4040/jobs/job?id=157","http://master:4040/jobs/job?id=158","http://master:4040/jobs/job?id=159","http://master:4040/jobs/job?id=160","http://master:4040/jobs/job?id=161","http://master:4040/jobs/job?id=162","http://master:4040/jobs/job?id=163","http://master:4040/jobs/job?id=164","http://master:4040/jobs/job?id=165","http://master:4040/jobs/job?id=166","http://master:4040/jobs/job?id=167","http://master:4040/jobs/job?id=168","http://master:4040/jobs/job?id=169","http://master:4040/jobs/job?id=170","http://master:4040/jobs/job?id=171","http://master:4040/jobs/job?id=172","http://master:4040/jobs/job?id=173","http://master:4040/jobs/job?id=174","http://master:4040/jobs/job?id=175","http://master:4040/jobs/job?id=176","http://master:4040/jobs/job?id=177","http://master:4040/jobs/job?id=178","http://master:4040/jobs/job?id=179","http://master:4040/jobs/job?id=180","http://master:4040/jobs/job?id=181","http://master:4040/jobs/job?id=182","http://master:4040/jobs/job?id=183","http://master:4040/jobs/job?id=184","http://master:4040/jobs/job?id=185","http://master:4040/jobs/job?id=186","http://master:4040/jobs/job?id=187","http://master:4040/jobs/job?id=188","http://master:4040/jobs/job?id=189","http://master:4040/jobs/job?id=190","http://master:4040/jobs/job?id=191","http://master:4040/jobs/job?id=192","http://master:4040/jobs/job?id=193","http://master:4040/jobs/job?id=194","http://master:4040/jobs/job?id=195","http://master:4040/jobs/job?id=196","http://master:4040/jobs/job?id=197","http://master:4040/jobs/job?id=198","http://master:4040/jobs/job?id=199","http://master:4040/jobs/job?id=200","http://master:4040/jobs/job?id=201","http://master:4040/jobs/job?id=202","http://master:4040/jobs/job?id=203","http://master:4040/jobs/job?id=204","http://master:4040/jobs/job?id=205","http://master:4040/jobs/job?id=206","http://master:4040/jobs/job?id=207","http://master:4040/jobs/job?id=208","http://master:4040/jobs/job?id=209","http://master:4040/jobs/job?id=210","http://master:4040/jobs/job?id=211","http://master:4040/jobs/job?id=212","http://master:4040/jobs/job?id=213","http://master:4040/jobs/job?id=214","http://master:4040/jobs/job?id=215","http://master:4040/jobs/job?id=216","http://master:4040/jobs/job?id=217","http://master:4040/jobs/job?id=218","http://master:4040/jobs/job?id=219","http://master:4040/jobs/job?id=220"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1571580310193_1529040387","id":"20191020-140510_366360204","dateCreated":"2019-10-20T14:05:10+0000","dateStarted":"2019-10-21T01:15:42+0000","dateFinished":"2019-10-21T01:16:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5995"},{"user":"admin","dateUpdated":"2019-10-21T01:16:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1571580720051_-1395035296","id":"20191020-141200_1967863211","dateCreated":"2019-10-20T14:12:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5996"}],"name":"DataFrameBasics","id":"2ERQJ38A7","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}